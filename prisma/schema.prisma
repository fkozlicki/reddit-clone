generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String        @id @default(cuid())
  email                String        @unique
  createdAt            DateTime      @default(now())
  name                 String        @unique
  displayName          String?
  about                String?
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  comments             Comment[]
  commentVotes         CommentVote[]
  posts                Post[]
  saved                SavedPost[]
  sessions             Session[]
  votes                Vote[]
  communities          Community[]   @relation("members")
  moderatedCommunities Community[]   @relation("moderators")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime    @default(now())
  communityId String
  authorId    String
  comments    Comment[]
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  community   Community   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  votes       Vote[]
  saved       SavedPost[]
}

model SavedPost {
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Vote {
  id     String @id @default(cuid())
  value  Int
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  postId    String
  authorId  String
  replyToId String?
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade)
  replies   Comment[]     @relation("ReplyTo")
  votes     CommentVote[]
}

model CommentVote {
  id        String  @id @default(cuid())
  value     Int
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Community {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String?
  topicId     String?
  image       String?
  topic       Topic?   @relation(fields: [topicId], references: [id], onDelete: Cascade)
  posts       Post[]
  members     User[]   @relation("members")
  moderators  User[]   @relation("moderators")
}

model Topic {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  communities Community[]
}
